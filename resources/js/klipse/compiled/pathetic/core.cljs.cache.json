["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$resolve"]],"~:name","~$pathetic.core","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^;","^;","~$uri","~$goog.Uri","^=","^=","~$string","~$goog.string","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$relativize",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","~:line",185,"~:column",7,"~:end-line",185,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^L",[["~$base-path","~$dest-path"]]]]],"~:doc","Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as destination-path, but\n   relative to base-path."],"^6","~$pathetic.core/relativize","~:variadic",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",17,"~:method-params",["^L",[["^N","^O"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^H",1,"^G",185,"^I",185,"~:max-fixed-arity",2,"~:fn-var",true,"^K",["^L",["^M",["^L",[["^N","^O"]]]]],"^P","Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as destination-path, but\n   relative to base-path."],"~$separator",["^ ","^6","~$pathetic.core/separator","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",11,"^H",1,"^I",11,"^J",32,"~:private",true,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",11,"^H",23,"^I",11,"^J",32,"^Z",true],"~:tag","^>"],"~$unique-suffix",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",35,"^H",8,"^I",35,"^J",21,"^Z",true,"^K",["^L",["^M",["^L",[["~$uninteresting-coll","~$interesting-coll"]]]]],"^P","Returns the elements of interesting-coll that are not part of the common\n   prefix with uninteresting-coll."],"^Z",true,"^6","~$pathetic.core/unique-suffix","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",21,"^S",["^L",[["^11","^12"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",35,"^I",35,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["^11","^12"]]]]],"^P","Returns the elements of interesting-coll that are not part of the common\n   prefix with uninteresting-coll."],"~$ends-with",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",226,"^H",7,"^I",226,"^J",16,"^K",["^L",["^M",["^L",[["~$s","~$suffix"]]]]]],"^6","~$pathetic.core/ends-with","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",16,"^S",["^L",[["~$s","^15"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",226,"^I",226,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["~$s","^15"]]]]]],"~$normalize",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",153,"^H",7,"^I",153,"^J",16,"^K",["^L",["^M",["^L",[["~$path"]]]]],"^P","Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any unremovable same-/parent-dir references. Takes the path\n   argument as a string and returns its result as a string."],"^6","~$pathetic.core/normalize","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",16,"^S",["^L",[["^18"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",153,"^I",153,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^18"]]]]],"^P","Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any unremovable same-/parent-dir references. Takes the path\n   argument as a string and returns its result as a string."],"~$url-normalize",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",270,"^H",7,"^I",270,"^J",20,"^K",["^L",["^M",["^L",[["~$url-or-string"]]]]],"^P","Behaves like normalize on the path part of a URL, but takes a j.n.URL or\n   string containing a URL, and returns a string containing the same URL\n   instead of just a path. Everything but the path part of the URL is unchanged\n   (query, anchor, protocol, etc)."],"^6","~$pathetic.core/url-normalize","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",20,"^S",["^L",[["^1;"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",270,"^I",270,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^1;"]]]]],"^P","Behaves like normalize on the path part of a URL, but takes a j.n.URL or\n   string containing a URL, and returns a string containing the same URL\n   instead of just a path. Everything but the path part of the URL is unchanged\n   (query, anchor, protocol, etc)."],"~$split-url-on-path",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",256,"^H",7,"^I",256,"^J",24,"^K",["^L",["^M",["^L",[["^1;"]]]]],"^P","Given a URL or string containing a URL, returns a vector of the three\n   component strings: the stuff before the path, the path, and the stuff\n   after the path. Useful for destructuring."],"^6","~$pathetic.core/split-url-on-path","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",24,"^S",["^L",[["^1;"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",256,"^I",256,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^1;"]]]]],"^P","Given a URL or string containing a URL, returns a vector of the three\n   component strings: the stuff before the path, the path, and the stuff\n   after the path. Useful for destructuring."],"~$render-path",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",81,"^H",7,"^I",81,"^J",18,"^K",["^L",["^M",["^L",[["~$path-pieces"]]]]],"^P","Given a seq of path elements as created by parse-path, returns a string\n   containing the path represented. This function will only\n   ever use unix-style path rules, so an absolute path will always start with\n   the \"/\" separator.\n\n   NOTE: It is NOT the goal of this function to perform normalization, it just\n   renders what it is given. HOWEVER, that does NOT mean that it is always true\n   that (= (render-path (parse-path some-path)) some-path). That is, you may not\n   render the exact same string you parsed. This is because the path syntax does\n   not have exactly one way to write every path."],"^6","~$pathetic.core/render-path","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",18,"^S",["^L",[["^1@"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",81,"^I",81,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^1@"]]]]],"^P","Given a seq of path elements as created by parse-path, returns a string\n   containing the path represented. This function will only\n   ever use unix-style path rules, so an absolute path will always start with\n   the \"/\" separator.\n\n   NOTE: It is NOT the goal of this function to perform normalization, it just\n   renders what it is given. HOWEVER, that does NOT mean that it is always true\n   that (= (render-path (parse-path some-path)) some-path). That is, you may not\n   render the exact same string you parsed. This is because the path syntax does\n   not have exactly one way to write every path."],"~$starts-with",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",110,"^H",7,"^I",110,"^J",18,"^K",["^L",["^M",["^L",[["~$s","~$prefix"]]]]]],"^6","~$pathetic.core/starts-with","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",18,"^S",["^L",[["~$s","^1C"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",110,"^I",110,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["~$s","^1C"]]]]]],"~$relativize*",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",160,"^H",7,"^I",160,"^J",18,"^K",["^L",["^M",["^L",[["^N","^O"]]]]],"^P","Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as dest-path, but\n   relative to base-path. Paths should be path vectors, and the return\n   value is also a path vector."],"^6","~$pathetic.core/relativize*","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",18,"^S",["^L",[["^N","^O"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",160,"^I",160,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["^N","^O"]]]]],"^P","Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as dest-path, but\n   relative to base-path. Paths should be path vectors, and the return\n   value is also a path vector."],"~$common-prefix",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",28,"^H",8,"^I",28,"^J",21,"^Z",true,"^K",["^L",["^M",["^L",[["~$coll1","~$coll2"]]]]],"^P","Given two collections, returns a sequence containing the prefix they\n   share. Example: (common-prefix [\\a \\b] [\\a \\b \\c \\d]) -> (\\a \\b)"],"^Z",true,"^6","~$pathetic.core/common-prefix","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",21,"^S",["^L",[["^1H","^1I"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",28,"^I",28,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["^1H","^1I"]]]]],"^P","Given two collections, returns a sequence containing the prefix they\n   share. Example: (common-prefix [\\a \\b] [\\a \\b \\c \\d]) -> (\\a \\b)"],"~$parse-path",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",54,"^H",7,"^I",54,"^J",17,"^K",["^L",["^M",["^L",[["^18"]]]]],"^P","Given a j.io.File or string containing a relative or absolute path,\n   returns the corresponding path vector data structure described at\n   the top of the file.\n\n   This function does not do any normalization or simplification. However,\n   because there is more than one way to write some paths, some simplification\n   might happen anyways, such as if the path starts with a (redundant) \".\"."],"^6","~$pathetic.core/parse-path","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",17,"^S",["^L",[["^18"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",54,"^I",54,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^18"]]]]],"^P","Given a j.io.File or string containing a relative or absolute path,\n   returns the corresponding path vector data structure described at\n   the top of the file.\n\n   This function does not do any normalization or simplification. However,\n   because there is more than one way to write some paths, some simplification\n   might happen anyways, such as if the path starts with a (redundant) \".\"."],"~$separator-pattern",["^ ","^6","~$pathetic.core/separator-pattern","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",12,"^H",1,"^I",12,"^J",40,"^Z",true,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",12,"^H",23,"^I",12,"^J",40,"^Z",true],"^[","~$any"],"~$normalize*",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",135,"^H",7,"^I",135,"^J",17,"^K",["^L",["^M",["^L",[["^1@"]]]]],"^P","Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any removable same-/parent-dir references. path-pieces\n   should be a path vector in the format returned by parse-path;\n   return value is a vector in the same format."],"^6","~$pathetic.core/normalize*","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",17,"^S",["^L",[["^1@"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",135,"^I",135,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^1@"]]]]],"^P","Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any removable same-/parent-dir references. path-pieces\n   should be a path vector in the format returned by parse-path;\n   return value is a vector in the same format."],"~$resolve*",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",194,"^H",7,"^I",194,"^J",15,"^K",["^L",["^M",["^L",[["^N","~$other-path"]]]]],"^P","Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. All inputs and outputs are path vectors."],"^6","~$pathetic.core/resolve*","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",15,"^S",["^L",[["^N","^1S"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",194,"^I",194,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["^N","^1S"]]]]],"^P","Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. All inputs and outputs are path vectors."],"~$up-dir",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",119,"^H",7,"^I",119,"^J",13,"^K",["^L",["^M",["^L",[["^1@"]]]]],"^P","Given a seq of path elements as created by parse-path, returns a new\n   seq of path elements, but having gone \"up\" one directory. That is,\n   applies a \"..\" component to the path."],"^6","~$pathetic.core/up-dir","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",13,"^S",["^L",[["^1@"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",119,"^I",119,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^1@"]]]]],"^P","Given a seq of path elements as created by parse-path, returns a new\n   seq of path elements, but having gone \"up\" one directory. That is,\n   applies a \"..\" component to the path."],"~$ensure-trailing-separator",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",230,"^H",7,"^I",230,"^J",32,"^K",["^L",["^M",["^L",[["^18"]]]]],"^P","If the path given does not have a trailing separator, returns a new path\n   that has one."],"^6","~$pathetic.core/ensure-trailing-separator","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",32,"^S",["^L",[["^18"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",230,"^I",230,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^18"]]]]],"^P","If the path given does not have a trailing separator, returns a new path\n   that has one."],"~$split",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",48,"^H",7,"^I",48,"^J",12,"^K",["^L",["^M",["^L",[["^18"]]]]]],"^6","~$pathetic.core/split","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",12,"^S",["^L",[["^18"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",48,"^I",48,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^18"]]]]]],"~$url-ensure-trailing-separator",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",279,"^H",7,"^I",279,"^J",36,"^K",["^L",["^M",["^L",[["^1;"]]]]],"^P","Behaves like ensure-trailing-separator on the path part of a URL, but takes\n   a j.n.URL or string containing a URL, and returns a string containing the\n   same URL instead of just a path. Everything but the path part of the URL is\n   unchanged (query, anchor, protocol, etc)."],"^6","~$pathetic.core/url-ensure-trailing-separator","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",36,"^S",["^L",[["^1;"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",279,"^I",279,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^1;"]]]]],"^P","Behaves like ensure-trailing-separator on the path part of a URL, but takes\n   a j.n.URL or string containing a URL, and returns a string containing the\n   same URL instead of just a path. Everything but the path part of the URL is\n   unchanged (query, anchor, protocol, etc)."],"~$as-url",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",250,"^H",7,"^I",250,"^J",13,"^K",["^L",["^M",["^L",[["^1;"]]]]]],"^6","~$pathetic.core/as-url","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",13,"^S",["^L",[["^1;"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",250,"^I",250,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^1;"]]]]]],"^5",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",210,"^H",7,"^I",210,"^J",14,"^K",["^L",["^M",["^L",[["^N","^1S"]]]]],"^P","Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. Accepts an optional third argument containing a string\n   with the path separator to use."],"^6","~$pathetic.core/resolve","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",14,"^S",["^L",[["^N","^1S"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",210,"^I",210,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["^N","^1S"]]]]],"^P","Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. Accepts an optional third argument containing a string\n   with the path separator to use."],"~$absolute-path?",["^ ","^D",null,"^E",["^ ","^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^G",114,"^H",7,"^I",114,"^J",21,"^K",["^L",["^M",["^L",[["^18"]]]]],"^P","Returns true if the given argument is an absolute path."],"^6","~$pathetic.core/absolute-path?","^R",false,"^F","/Users/jocrau/.cljs/.aot_cache/1.10.145/3052F12/pathetic/core.cljs","^J",21,"^S",["^L",[["^18"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",114,"^I",114,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^18"]]]]],"^P","Returns true if the given argument is an absolute path."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else","~:cwd","~:root"]],"~:order",["^2<","^2;","^2:"]],"^P",null]